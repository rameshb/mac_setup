#!/bin/bash

#####################################
# This script sets up your machine
# Permission set to user readable & executable
# by: chmod 775 ./setup
# run by right-clicking it
#####################################


#####################################
# Preparing to run
#####################################
echo "

Detected Mac OSX (Darwin), running corresponding setup.
================================================
"
# prevent sleep for this script; & runs in background
caffeinate -d &


#####################################
# System Preference customization
#####################################
# Systems prefs, location at: ~/Library/Preferences
# to read, e.g.:
# defaults read com.apple.dock
# reset if u fucked up:
# defaults delete com.apple.dock; killall Dock
echo "
================================================

Customizing System Preferences

================================================
"

#####################################
# System-wide UI / Behavior
#####################################
# use dark menu bar and Dock
defaults write NSGlobalDomain AppleInterfaceStyle -string Dark

# highlight color = red
defaults write NSGlobalDomain AppleHighlightColor -string "1.000000 0.733333 0.721569"

# Require password immediately after sleep or screen saver begins
defaults write com.apple.screensaver askForPassword -int 1
defaults write com.apple.screensaver askForPasswordDelay -int 0


#####################################
# Menu Bar
#####################################
# battery show percentage
defaults write com.apple.menuextra.battery ShowPercent -string YES

# clock show second
defaults write com.apple.menuextra.clock DateFormat -string "EEE MMM d  h:mm:ss a"


#####################################
# Trackpad, Mouse
#####################################
# enable tap-to-click everywhere
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
defaults write com.apple.AppleMultitouchTrackpad Clicking -int 1
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

# global trackpad tracking speed (1...5)
defaults write NSGlobalDomain com.apple.trackpad.scaling -int 5

# three finger drag
defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerDrag -int 1


#####################################
# Keyboard
#####################################
# text: correct spelling automatically = 0
defaults write NSGlobalDomain WebAutomaticSpellingCorrectionEnabled -bool false

# Enable full keyboard access for all controls (eg enable Tab in modal dialogs)
defaults write NSGlobalDomain AppleKeyboardUIMode -int 2



#####################################
# Dock
#####################################
# move dock to left
defaults write com.apple.dock orientation -string left
defaults write com.apple.dock autohide -bool true
defaults write com.apple.dock minimize-to-application -bool true
defaults write com.apple.dock showAppExposeGestureEnabled -bool true

# show only active app icons in doc
defaults write com.apple.dock static-only -bool true

# adjusts size of app icons
defaults write com.apple.dock tilesize -int 65


#####################################
# Kill affected applications
#####################################
for app in "cfprefsd" "Dock" "Finder" "SystemUIServer"; do
  killall "$app" > /dev/null 2>&1
done

echo "
================================================

System Preferences customized. 
These may take a while to propagate.

================================================
"




#####################################
# Homebrew-install all shits
#####################################
echo "
================================================

Setup ~/.bash_profile

================================================
"
# setup bash profile first before being overridden
echo "
# for Git
export PATH=/usr/local/git/bin:\$PATH
 
# TheFuck
alias fuck='eval \$(thefuck \$(fc -ln -1)); history -r'
# You can use whatever you want as an alias, like for Mondays:
alias FUCK='fuck'
 
# git
alias gstat='git status'
alias gadd='git add -A; git commit -m'
alias gpush='git push'
alias gpull='git pull'
alias gdiff='git diff' 

# For neo4j to use JVM 1.8
export JAVA_HOME=\$(/usr/libexec/java_home)

# lazy-check your ip
alias myip='curl ipinfo.io'
# lazy ping check
alias gping='ping www.google.com'
# check listening port
alias listenport='netstat -atp tcp | grep -i \"listen\"'

alias python='python3'
" > ~/.bash_profile

#####################################
# Set up Homebrew
#####################################
echo "
================================================

Installing Homebrew.
Hit return (Okay) when prompted to install command line tool

================================================
"
# Installs homebrew
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"


# upgrade and check
brew update && brew upgrade
brew doctor

# install the prereq
brew install git
brew install wget

# homebrew taps
brew tap caskroom/cask
brew tap caskroom/versions
brew tap caskroom/fonts


#####################################
# Install common apps
#####################################
# Installs cask, really vital
brew install caskroom/cask/brew-cask

# Install the basic apps for work
brew cask install google-chrome
brew cask install 1password
brew cask install tunnelblick
brew cask install sublime-text3
brew cask install font-source-code-pro
brew cask install slack
brew cask install spotify
brew cask install shiftit
brew cask install java
# brew install maven


# #####################################
# # Install Neo4j
# #####################################
# brew install neo4j
# source ~/.bash_profile
# echo "
# # Neo4j home path
# export NEO4J_HOME=$(neo4j-shell -c 'dbinfo -g Configuration dbms.directories.data' | grep -oE '\/.*lib.*?\/')" >> ~/.bash_profile
# source ~/.bash_profile
# # Install the shell tool for import export
# curl -LOk http://dist.neo4j.org/jexp/shell/neo4j-shell-tools_2.2.zip && unzip neo4j-shell-tools_2.2.zip -d ${NEO4J_HOME}lib && rm neo4j-shell-tools_2.2.zip
# # auto reset pswd to 0000 from neo4j for direct use
# curl -X POST -d "password=0000" -u neo4j:neo4j http://localhost:7474/user/neo4j/password


# #####################################
# # Install Postgresql 9.5: 
# # !Takes a long time
# # when 9.5 is out of beta, just do brew install postgresql
# #####################################
# # set permission, install, link, init
# chown -R $(whoami) /usr/local
# brew tap petere/postgresql
# brew install petere/postgresql/postgresql-9.5
# brew link -f postgresql-9.5
# initdb /usr/local/var/postgres -E utf8


# download the vpn configs for tunnelblick
curl -o ~/Downloads/openvpn.zip https://www.privateinternetaccess.com/openvpn/openvpn.zip
unzip ~/Downloads/openvpn.zip -d ~/Downloads/openvpn/
rm ~/Downloads/openvpn.zip

#####################################
# Run the binary to install ext
#####################################
open -a Google\ Chrome
open -a Safari
open -a 1Password\ 6

#####################################
# Install Python and pip apps
#####################################
# both version 2.x and 3.x
brew install python3
# update the shitty pip
pip3 install -U setuptools
pip3 install -U virtualenvwrapper
mkdir ~/.virtualenvs
echo "
# python3 virtualenvwrapper
export WORKON_HOME=~/.virtualenvs
VIRTUALENVWRAPPER_PYTHON='/usr/bin/python3'
source /usr/local/bin/virtualenvwrapper.sh" >> ~/.bash_profile
pip3 install thefuck glances speedtest-cli

# Machine Learning stuff
# install BLAS for gensim before numpy to speed up by an order
git clone https://github.com/xianyi/OpenBLAS.git
cd OpenBLAS
make
cd
rm -rf OpenBLAS
# tensorflow and skflow
sudo pip3 install -U numpy
sudo pip3 install -U scipy
sudo pip3 install -U scikit-learn
sudo pip3 install -U pandas
sudo pip3 install -U matplotlib


#####################################
# Install Node.js and npm apps
#####################################
brew install node
npm update npm -g
# gulp for streaming build, forever for keep-alive
npm i -g gulp forever ngrok istanbul


#####################################
# Setup Amazon EC2 CLI
#####################################
# curl -O http://s3.amazonaws.com/ec2-downloads/ec2-api-tools.zip
# sudo mkdir /usr/local/ec2
# sudo unzip ec2-api-tools.zip -d /usr/local/ec2
# export EC2_HOME=/usr/local/ec2/$(ls /usr/local/ec2)
# export PATH=$PATH:$EC2_HOME/bin

# Then manually export your EC2 instance cred
# more ref here http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/set-up-ec2-cli-linux.html#setting_up_ec2_command_linux
# export AWS_ACCESS_KEY=your-aws-access-key-id 
# export AWS_SECRET_KEY=your-aws-secret-key

# rm -rf mac_setup master.zip ec2-api-tools.zip


#####################################
# Restoring custom Sublime config
#####################################
echo "
================================================

Restoring Sublime Text configs

================================================
"
# clone ST config using the new token into destination
git clone https://github.com/kengz/sublime_settings.git /Users/$(whoami)/Documents/Sublime\ Text\ 3
# delete default ST config
rm -rf /Users/$(whoami)/Library/Application\ Support/Sublime\ Text\ 3
# symlink the cloned ST config
ln -s "/Users/$(whoami)/Documents/Sublime Text 3" "/Users/$(whoami)/Library/Application Support/"



#####################################
# Install Ruby on Rails with rbenv
#####################################
echo "gem: --no-document" >> ~/.gemrc
brew install rbenv ruby-build
echo '
# for rbenv
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi' >> ~/.bash_profile
source ~/.bash_profile
rbenv install --verbose $(rbenv install -l | grep -v - | tail -1)
rbenv global --verbose $(rbenv install -l | grep -v - | tail -1)
gem install bundler
gem install rails
rbenv rehash

# install travis for encryption
gem install travis



#####################################
# All done. brew doctor to check all is proper
#####################################

brew doctor

echo "
================================================

Setup is done.
Restart your machine for changes to apply.

================================================
"


