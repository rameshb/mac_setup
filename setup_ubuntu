#!/bin/bash

#####################################
# This script sets up your machine
# Permission set to user readable & executable
# by: chmod 775 ./setup_linux
# run by right-clicking it
#####################################


#####################################
# Preparing to run
#####################################
echo "

Detected Linux, running corresponding setup.
================================================
"


#####################################
# Set your swap file bigger
#####################################
echo "
================================================

Setting 1Gb swap space.

================================================
"
swapoff -a
sudo dd if=/dev/zero of=/swapfile bs=1024 count=1024k
sudo mkswap /swapfile
sudo swapon /swapfile
swapon -s


#####################################
# install all shits
#####################################
echo "
================================================

Setup ~/.bashrc

================================================
"
# setup bash profile first before being overridden
echo "
# TheFuck
alias fuck='eval \$(thefuck \$(fc -ln -1)); history -r'
# You can use whatever you want as an alias, like for Mondays:
alias FUCK='fuck'

# git
alias gstat='git status'
alias gadd='git add -A; git commit -m'
alias gpush='git push'
alias gpull='git pull'
 
# activate tensorflow
alias activatetf='source ~/tensorflow/bin/activate'

# lazy-check your ip
alias myip='curl ipinfo.io'
# lazy ping check
alias gping='ping www.google.com'
# check listening port
alias listenport='netstat -atp tcp | grep -i \"listen\"'" >> ~/.bashrc


# Update first before install
sudo apt-get update 
sudo apt-get -y install ruby


#####################################
# Add keys
#####################################
# Google-chrome
# wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add - 
# sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
# ST3
sudo add-apt-repository -y ppa:webupd8team/sublime-text-3
# jdk 8
sudo add-apt-repository -y ppa:openjdk-r/ppa
# neo4j
sudo wget -O - https://debian.neo4j.org/neotechnology.gpg.key | sudo apt-key add -;
sudo sh -c 'echo "deb http://debian.neo4j.org/repo stable/" > /etc/apt/sources.list.d/neo4j.list'
# postgres 9.5
sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" >> /etc/apt/sources.list.d/pgdg.list'
wget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O - | sudo apt-key add -

# then update
sudo apt-get update


#####################################
# Install common apps
#####################################
sudo apt-get -y install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev libatlas-dev libatlas3gf-base
sudo apt-get -y install git
# sudo apt-get -y install google-chrome-stable
sudo apt-get -y install sublime-text-installer
sudo apt-get -y install screen

# install java
echo "
=> Ensuring you have JDK 1.8 to run neo4j"
java -version || sudo apt-get -y install openjdk-8-jdk

# write JAVA_HOME path if not exists
if [ "$JAVA_HOME" == "" ]; 
	then jdkpath=$(readlink -f $(which java) | sed 's/\(.*\)\/bin\/java/\1/'); echo "
# For neo4j to use JVM
export JAVA_HOME=$jdkpath" >> ~/.bashrc;
fi
# Maven
# sudo add-apt-repository "deb http://ppa.launchpad.net/natecarlson/maven3/ubuntu precise main"
# sudo apt-get update
# sudo apt-get -y install maven3



#####################################
# Install Python and pip apps
#####################################
sudo apt-get -y install python3-pip python3-dev python3-setuptools
sudo pip3 install -U setuptools
sudo pip3 install -U virtualenvwrapper
mkdir ~/.virtualenvs
echo "
# python3 virtualenvwrapper
export WORKON_HOME=~/.virtualenvs
VIRTUALENVWRAPPER_PYTHON='/usr/bin/python3'
source /usr/local/bin/virtualenvwrapper.sh" >> ~/.bashrc
sudo pip3 install -U thefuck glances speedtest-cli

# Machine Learning stuff
# install BLAS for gensim before numpy to speed up by an order
sudo git clone https://github.com/xianyi/OpenBLAS.git
cd OpenBLAS
sudo make
cd
sudo rm -rf OpenBLAS
# tensorflow and skflow
sudo apt-get -y install libatlas-dev
sudo apt-get -y install libblas-dev
sudo apt-get -y install liblapack-dev
sudo apt-get -y install gfortran
sudo apt-get -y install python3-numpy
sudo apt-get -y install python3-scipy
# sudo pip3 install -U https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.7.1-cp34-none-linux_x86_64.whl
# sudo pip3 install -U scikit-learn
# sudo pip3 install -U git+git://github.com/tensorflow/skflow.git
# sudo pip3 install -U pandas
# sudo apt-get -y install python-matplotlib


#####################################
# Install Node.js and npm apps
#####################################
curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
sudo apt-get -y install -y nodejs
sudo apt-get -y install npm
sudo ln -s /usr/bin/nodejs /usr/bin/node
sudo npm update npm -g
# gulp for streaming build, forever for keep-alive
sudo npm i -g gulp forever



#####################################
# Install Neo4j
#####################################
sudo apt-get -y install neo4j;
echo "
# Neo4j home path
export NEO4J_HOME=$(neo4j-shell -c 'dbinfo -g Configuration dbms.directories.data' | grep -oE '\/.*lib.*?\/')" >> ~/.bashrc
source ~/.bashrc
# Install the shell tool for import export
curl -LOk http://dist.neo4j.org/jexp/shell/neo4j-shell-tools_2.2.zip && unzip neo4j-shell-tools_2.2.zip -d ${NEO4J_HOME}lib && rm neo4j-shell-tools_2.2.zip


#####################################
# Install Postgresql 9.5: 
#####################################
sudo apt-get -y install postgresql postgresql-contrib



#####################################
# Install Ruby on Rails with rbenv
#####################################
# install rbenv ruby-build
cd
git clone git://github.com/sstephenson/rbenv.git .rbenv
echo '
export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
echo 'eval "$(rbenv init -)"' >> ~/.bashrc

git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bashrc

git clone https://github.com/sstephenson/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash
source ~/.bashrc

rbenv install --verbose $(rbenv install -l | grep -v - | tail -1)
rbenv global --verbose $(rbenv install -l | grep -v - | tail -1)
sudo apt-get -y install ruby-dev make
echo "gem: --no-ri --no-rdoc" > ~/.gemrc
gem install bundler
gem install rails
rbenv rehash

# install travis for encryption
gem install travis



#####################################
# Setup Amazon EC2 CLI
#####################################
# curl -O http://s3.amazonaws.com/ec2-downloads/ec2-api-tools.zip
# sudo mkdir /usr/local/ec2
# sudo unzip ec2-api-tools.zip -d /usr/local/ec2
# export EC2_HOME=/usr/local/ec2/$(ls /usr/local/ec2)
# export PATH=$PATH:$EC2_HOME/bin

# Then manually export your EC2 instance cred
# more ref here http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/set-up-ec2-cli-linux.html#setting_up_ec2_command_linux
# export AWS_ACCESS_KEY=your-aws-access-key-id 
# export AWS_SECRET_KEY=your-aws-secret-key


# rm -rf mac_setup master.zip ec2-api-tools.zip


echo "
================================================

Setup is done.
Restart your machine for changes to apply.

================================================
"


